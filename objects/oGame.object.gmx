<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
randomize();

tile_size = 10;
r_width = room_width / tile_size;
r_height = room_height / tile_size;

road = oRoad;
rock = oRock;
space = oSpace;
man = oMan;
stump = oStump;

ground[0] = road;
ground[1] = rock;
ground[2] = space;

generate = true;

map[r_width, r_height] = 0;
map_display[r_width, r_height] = 0;

room_count = 0;
global.player = instance_create(r_width / 2, r_height / 2, oPlayer);

shake_count_max = 60;
shake_count = shake_count_max;
shake = 0;
shaking = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Processing

///Map Generate

if generate == true
{
    with(oThing)
    {
        instance_destroy();
    }
    for (var a = 0; a &lt; r_width; a++)
    {
        for (var b = 0; b &lt; r_height; b++)
        {
            if a == 0 or b == 0 or a == 1 or b == 1 or a == r_width - 2 or b == r_height - 2 or a == r_width - 1 or b == r_height - 1
            {
                map[a, b] = instance_create(a, b, oSpace);
            }
            else
            {
                map[a, b] = instance_create(a, b, ground[irandom(2)]);
            }
            switch(room_count)
            {
                case 0:
                    if (a == 33 and b == 25)
                    {
                        //map[a, b].hp = 0;
                        map[a, b] = instance_create(a, b, oSpace);
                    }
                break;
                case 1:
                    if (a == 32 and b == 24)
                        map[a, b] = instance_create(a, b, oMan);
                break;
                default:
                break;
            }
        }
    }
    generate = false;
    room_count += 1;
}

if shaking == true
{
    if shake_count &gt; 0
    {
        shake = random(4);
        shake_count -= 1;
    }
    else
    {
        shaking = false;
        shake_count = shake_count_max;
    }
}

map_display = map;

if keyboard_check_pressed(vk_escape)
{
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_font(fontScore);
draw_set_halign(fa_left);
//draw_set_colour(c_gray);
for (var a = 0; a &lt; r_width; a++)
{
    for (var b = 0; b &lt; r_height; b++)
    {
        var cell = map_display[a, b];
        draw_text_colour ( a * tile_size + shake, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 1);
        if shaking == true
        {
            draw_text_colour ( a * tile_size - shake, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 0.2);
        }
    }
}
//draw_text (player.x * tile_size, player.y * tile_size, player.char);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
