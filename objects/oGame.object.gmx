<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits
// gives a random seed EVERY time the game is run
randomize();

// fonts + view dimensions
draw_init();
                   
// initialize map arrays and room size
room_dimensions(tile_size, room_width_max, room_height_max);

// sets the offset for pointers to terrain, creatures, items, etc.
asset_offsets_init();

// room count. TODO : need this? (NOTE: will have to figure out a way to save specific room to file)
room_count = 0;
// if set to true, regenerates the level. set to true at create, bc gen code is in the STEP, not CREATE, so has to generate when game is started
// TODO: need this? wrapping movement should get rid of it
generate = true;

// spawn the player. (TODO: does it need to be global? should only ever be 1 player, can refer to oPlayer)
global.player = instance_create(1, 1, oPlayer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug init
global.debug = false;

fps_timer_init = 60;
fps_timer = fps_timer_init;
fps_string = "FPS = " + string(round(fps_real));

inst_string = "Instance # = " + string(instance_count);

obj_to_place = terrain_start;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls Interface
// press F1 to switch the font bettwen Road Drivin' (â„¢) + Odyssey
if keyboard_check_pressed (vk_f1)
{
    font_switch = !(font_switch);
    draw_set_font(font[font_switch]);
}
if keyboard_check_pressed (vk_f2)
{
    //view_switch = !(view_switch);
    view_switch++;
}
if keyboard_check_pressed (vk_f3)
{
    //view_switch = !(view_switch);
    view_switch--;
}
// press TAB to switch debug on or off
if keyboard_check_pressed (vk_tab)
{
    global.debug = !global.debug;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Processing

//Map Generate

//check_room_change();

if generate == true
{

    //var map_string = working_directory + "map52x32.txt";
    var map_string = textfile_init_map(52, 32);

    // TODO: make this a function, just do nested loops!
    var map_file = file_text_open_read(map_string);
    file_width = textfile_width(map_file);
    
    map_file = file_text_open_read(map_string);
    file_height = textfile_length(map_file);
    
    map_file = file_text_open_read(map_string);
    room_dimensions(tile_size, file_width, file_height);
    
    // TODO: write last room to a file here?
    
    // destroys all the oThings in the room (NOTE: does this NOT destroy the NPC?)
    with(oThing)
    {
        if (object_index != oPlayer)
        {
            instance_destroy();
        }
    }
    //for (var b = 0; !file_text_eof(map_file); b++)                               // loops through each cell of the map array
    for (var b = 0; b &lt; r_height; b++)
                                                                    // have to loop through height first for some reason?
    {
        //for (var a = 0; !file_text_eoln(map_file); a++)
        for (var a = 0; a &lt; r_width; a++)
        {
            var cell = (file_text_read_real(map_file) + terrain_start);
            // restricts incorrect values from being input into map array from text file
            if ( (cell &lt; terrain_start) or (cell &gt; terrain_end) )
            {
                cell = terrain_start + 1;
            }
            map[a, b] = instance_create(a, b, cell);                // a, b must be reversed for text file input for some reason?
            /*
                map[a, b] = instance_create(a, b, irandom_range(terrain_start, terrain_end));
            }
            */

        }
    }
    file_text_close(map_file);
    //file_width = a;
    //file_height = b;
    generate = false;                                               // set generate to false, so room doesn't keep regenerating
    room_count += 1;                                                // increment room count (this is 1 higher than actual CURRENT room?)
                                                                    // NOTE: will have to figure out a way to DECREMENT this when returning to old room, once array saving is figured out
                                                                    
    map_update = map;                                              // sets the display array to the map array, so that terrain is redrawn, instead of leaving paths of the player character's symbol
    //TODO: here is where you can put in creatures!
    //have list of possible objects
    //  0 = nothing
    //  1 = player
    //  2 = npc etc.
    // just have an amount of creatures/items each which of which has its own position. loop through the amount, placing them in map_update wherever their x y says to.
    // get this from a file? sometimes randomly?
}

game_quit();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Update

//FPS timer. stops FPS from cycling so fast you can't see what the number is
if (global.debug == true)
{
    if (fps_timer &gt; 0)
    {
        fps_timer -= 1;
    }
    else
    {
        fps_timer = fps_timer_init;
        fps_string = "FPS = " + string(round(fps_real));
    }
    inst_string = "Inst \# = " + string(instance_count);
    
    playerx_string = "X = " + string(oPlayer.x);
    playery_string = "Y = " + string(oPlayer.y);
    
    mouse_cell_x = mouse_x div tile_size;
    mouse_cell_y = mouse_y div tile_size;
    mouse_draw_x = mouse_cell_x * tile_size;
    mouse_draw_y = mouse_cell_y * tile_size;
    
    if mouse_wheel_up()
    {
        obj_to_place++;
        if (obj_to_place &gt; terrain_end)
        {
            obj_to_place = terrain_start;
        }
    }
    else if mouse_wheel_down()
    {
        obj_to_place--;
        if (obj_to_place &lt; terrain_start)
        {
            obj_to_place = terrain_end;
        }
    }
    if mouse_check_button_pressed(mb_left)
    {
        if ( (mouse_cell_x &gt;= 0) and (mouse_cell_y &gt;= 0) and (mouse_cell_x &lt; r_width) and (mouse_cell_y &lt; r_height) )
        {
            with (map[mouse_cell_x, mouse_cell_y])
            {
                instance_destroy();
            }
            map[mouse_cell_x, mouse_cell_y] = instance_create(mouse_cell_x, mouse_cell_y, obj_to_place);
            map_update[mouse_cell_x, mouse_cell_y] = map[mouse_cell_x, mouse_cell_y];
        }
    }
    /*
    // press n to create a new map array
    if keyboard_check_pressed(ord("N"))
    {
        room_dimensions(tile_size, file_width, file_height);
    }
    */
    // press s to save the current level to txt file
    if keyboard_check_pressed(ord("S"))
    {
        var save_file = get_save_filename("Normal text file (*.txt)|*.txt", "map_00"); // takes player's input for a file name
        if save_file != ""      // as long as user is actually putting characters in, we save
        {
            textfile_save_map(save_file, map, terrain_start);  // converts a map array into a text file
        }
    }
    // press l to load a map from a text file
    if keyboard_check_pressed(ord("L"))
    {
        var load_file = get_open_filename_ext("Normal text file (*.txt)|*.txt", "map_00", working_directory, "Hello");  // takes player's input for a file name
        if load_file != ""      // as long as user is actually putting characters in, we load
        {
            textfile_load_map(load_file);  // converts a map array into a text file
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Calculations
// so the draw event doesn't have a bunch of math in it

var view_scale = (1 / power(view_factor, view_switch))
// sets the view position according to player's position
room_view( (r_width * view_scale), (r_height * view_scale) );

// pre-sets the draw coordinates, so less math in draw event
// TODO: GET RID OF THIS WITH SURFACES
draw_set_coordinates();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

for (var a = 0; a &lt; r_width; a++)       // loops through the display array
{
    for (var b = 0; b &lt; r_height; b++)
    {
        draw_text_colour (draw_x_coords[a],  draw_y_coords[b], draw_cell[a,b].char, draw_cell[a,b].colour, draw_cell[a,b].colour, draw_cell[a,b].colour, draw_cell[a,b].colour, 1 );
                                        // TODO: draws the cell's font with the cell's colour to it's proper spot on the screen
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw

// TODO: get rid if this conditional?
if (global.debug == true)
{
    //draw the FPS, top left
    draw_set_font(fontScore);
    draw_set_colour(c_red);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size, fps_string);
    
    //draw the number of instances, below fps count
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*2, inst_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*3, file_width);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*4, file_height);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*5, playerx_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*6, playery_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*7, mouse_x);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*8, mouse_y);
    
    draw_rectangle_colour( mouse_draw_x, mouse_draw_y, mouse_draw_x + tile_size, mouse_draw_y + tile_size, c_red, c_red, c_red, c_red, true );
    draw_text( mouse_draw_x, mouse_draw_y, string(obj_to_place) );
    
    draw_set_font(font[font_switch]);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
