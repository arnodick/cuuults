<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
randomize();                        // gives a random seed EVERY time the game is run
texture_set_interpolation(false);   // gets rid of "smudginess" on sprites

tile_size = 16;                     // the size of each cell on the screen. (mess with this to get weird overlapping effects)

r_width = room_width / tile_size;   // the width/height of each room array is just the width/height of the actual room divided by the size of the cells
r_height = room_height / tile_size;

map[r_width, r_height] = 0;         // the somewhat static map of the level
map_update[r_width, r_height] = 0;  // the array of instances that will actually be drawn (NOTE: should this be in a screen object at the end of the list?)
room_count = 0;                     // room count. determines what you find in a room (NOTE: will have to figure out a way to save specific room to file)

// array of objects for proc generation
ground[0] = oRoad;
ground[1] = oGrass;
ground[2] = oSpace;

wall[0] = oRoad;
wall[1] = oWall;
wall[2] = oSpace;

generate = true;                        // if set to true, regenerates the level. set to true at create, bc gen code is in the STEP, not CREATE, so has to generate when game is started

//instance_create(0, 0, oScreen);

draw_set_font(rd);
draw_set_halign(fa_left);

global.debug = true;

global.player = instance_create(r_width / 2, r_height / 2, oPlayer);    //spawn the player in the middle of the room. (NOTE: does it need to be global? should only ever be 1 player, can refer to oPlayer)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Shake Init
screen_shake_init();                // initializes variables for screen shake
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug init
fps_timer_init = 60;
fps_timer = fps_timer_init;
fps_string = "FPS = " + string(round(fps_real));

inst_string = "Instance # = " + string(instance_count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map Processing

//Map Generate

check_room_change();

if generate == true
{
    with(oThing)                                                    // destroys all the oThings in the room (NOTE: does this NOT destroy the NPC?)
    {
        if (object_index != oPlayer)
        {
            instance_destroy();
        }
    }
    for (var a = 0; a &lt; r_width; a++)                               // loops through each cell of the map array
    {
        for (var b = 0; b &lt; r_height; b++)
        {
            if a == 0 or b == 0 or a == 1 or b == 1 or a == r_width - 2 or b == r_height - 2 or a == r_width - 1 or b == r_height - 1
                                                                    // edge and outside edge are assigned open space so player doesn't get stuck inside anything
            {
                map[a, b] = instance_create(a, b, oSpace);
            }
            else                                                    // assigns proc objects to each cell
            {
                switch(room_count)                                      // specific actions for each room
                {
                    case 0:                                             // room 0
                        if (a == r_width / 2 and b == r_height / 2)
                        {
                            //map[a, b].hp = 0;                         // figure out a way to make this properly destroy object at spot?
                            map[a, b] = instance_create(a, b, oSpace);  // puts a space where player will spawn
                                                                        // NOTE: old instance from this spot still, exists. will be destroyed when leaving room, but still could be cleaned up
                                                                        // NOTE: make this spot a proper variable, not a constant
                        }
                        else
                        {
                            map[a, b] = instance_create(a, b, ground[irandom(2)]);
                        }
                    break;
                    case 1:                                             // room 1
                        draw_set_font(font2);
                        if (a == 32 and b == 24)
                        {
                            map[a, b] = instance_create(a, b, oSpace);
                            // TODO: functions for creating terrain, to customize each piece, and remove create code from them
                            create_creature(a, b, oNPC, '3', c_blue, oBlood); // spawns NPC at middle of room
                        }                                                       // NOTE: old instance from this spot still, exists. will be destroyed when leaving room, but still could be cleaned up
                        
                        else if (a == 60 and b == 40)
                        {
                            map[a, b] = instance_create(a, b, oSpace);
                            create_creature(a, b, oLawnmower, 'L', c_green, oBlood); // spawns NPC at middle of room
                        } 
                        else if (a == 12 and b == 12)
                        {
                            map[a, b] = instance_create(a, b, oSpace);
                            create_creature(a, b, oBloooder, 'B', c_maroon, oBlood); // spawns NPC at middle of room
                        } 
                        
                        else
                        {
                            map[a, b] = instance_create(a, b, wall[irandom(2)]);
                        }
                    break;
                    case 2:                                             // room 1
                        draw_set_font(fontScore);
                        if (a == 35 and b == 28)
                        {
                            map[a, b] = instance_create(a, b, oSpace);
                            create_creature(a, b, oLawnmower, 'L', c_green, oBlood); // spawns NPC at middle of room
                        } 
                        else if (a == 12 and b == 12)
                        {
                            map[a, b] = instance_create(a, b, oSpace);
                            create_creature(a, b, oBloooder, 'B', c_maroon, oBlood); // spawns NPC at middle of room
                        } 
                        else
                        {
                            map[a, b] = instance_create(a, b, ground[irandom(2)]);
                        }
                    break;
                    default:   
                        draw_set_font(fontScore);                          
                        map[a, b] = instance_create(a, b, ground[irandom(2)]);
                    break;
                }
            }
        }
    }
    generate = false;                                               // set generate to false, so room doesn't keep regenerating
    room_count += 1;                                                // increment room count (this is 1 higher than actual CURRENT room?)
                                                                    // NOTE: will have to figure out a way to DECREMENT this when returning to old room, once array saving is figured out
                                                                    
    map_update = map;                                              // sets the display array to the map array, so that terrain is redrawn, instead of leaving paths of the player character's symbol
    //TODO: here is where you can put in creatures!
    //have list of possible objects
    //  0 = nothing
    //  1 = player
    //  2 = npc etc.
    // array init to 0
    // put creatures in cell ie: [a,b] = npc
    // loop through each cell
    // if 0 then map_update[a,b] = map[a,b]
    // else map_update[a,b] = instance_create npc (2)
}

game_quit();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Shake
screen_shake_check();   // checks if the screen is set to shake, then sets shake values
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

//FPS timer. stops FPS from cycling so fast you can't see what the number is
if (global.debug == true)
{
    if (fps_timer &gt; 0)
    {
        fps_timer -= 1;
    }
    else
    {
        fps_timer = fps_timer_init;
        fps_string = "FPS = " + string(round(fps_real));
    }
    
    inst_string = "Instance cnt = " + string(instance_count);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
//draw_set_font(fontScore);               // sets the font (NOTE: can this just happen once? does it need to happen every step?)
//draw_set_halign(fa_left);               // aligns all the text to the left

for (var a = 0; a &lt; r_width; a++)       // loops through the display array
{
    for (var b = 0; b &lt; r_height; b++)
    {
        var cell = map_update[a, b];    // captures the current cell of the array in a temp var
        //draw_set_font(font[cell.italic]);
        draw_text_colour ( a * tile_size + shake /*+ cell.anim*/, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 1);
                                        // draws the cell's font with the cell's colour to it's proper spot on the screen
                                        // NOTE: THIS IS DRAWING THE SHAKE OFFSET STUFF! set it so it only draws normal, put shake in shake function
        if shaking == true              // checks if shake is on, if so, draws shake-offset characters
        {
            draw_text_colour ( a * tile_size - shake, b * tile_size, cell.char, cell.colour, cell.colour, cell.colour, cell.colour, 0.2);
                                        // draws a faint double in the opposite direciton of the opaque characters
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw

if (global.debug == true)
{
    //draw the FPS, top left
    draw_set_colour(c_red);
    draw_text(32, 32, fps_string);
    
    //draw the number of instances, below fps count
    draw_text(32, 64, inst_string);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
