<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits

sectors = 8;

randomize();    // gives a random seed EVERY time the game is run

draw_init();    // fonts + view dimensions

asset_offsets_init();   // sets the offset for pointers to terrain, creatures, items, etc.

//room_dimensions(tile_size, room_width_max, room_height_max);    // initialize map arrays and room size

// spawn the player. (TODO: does it need to be global? should only ever be 1 player, can refer to oPlayer)
global.player = instance_create(1, 1, oPlayer);
// initializes map to all empty spaces
//textfile_load_map(working_directory + "map_0" + string(irandom(3)) + ".txt");
textfile_load_map_proc(working_directory + "map_0" + string(irandom(3)) + ".txt", sectors);

surfaces_init();

// room count. TODO : need this? (NOTE: will have to figure out a way to save specific room to file)
room_count = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug init
global.debug = false;

fps_timer_init = 60;
fps_timer = fps_timer_init;
fps_string = "FPS = " + string(round(fps_real));

inst_string = "Instance # = " + string(instance_count);

move_timer_string = string(oPlayer.move_timer_count);

obj_to_place = terrain_start;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls Interface
// press F1 to switch the font bettwen Road Drivin' (â„¢) + Odyssey
if keyboard_check_pressed (vk_f1)
{
    font_switch = !(font_switch);
    draw_set_font(font[font_switch]);
}
if keyboard_check_pressed (vk_f2)
{
    //view_switch = !(view_switch);
    view_switch++;
}
if keyboard_check_pressed (vk_f3)
{
    //view_switch = !(view_switch);
    view_switch--;
}
// press TAB to switch debug on or off
if keyboard_check_pressed (vk_tab)
{
    global.debug = !global.debug;
    if (global.debug == false)
    {
        if(instance_exists(cursor_object))
        {
            with(cursor_object)
            {
                instance_destroy();
            }
        }
    }
    else
    {
        cursor_object = instance_create(0, 0, oSpace);
    }
}
game_quit();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Update

//FPS timer. stops FPS from cycling so fast you can't see what the number is
if (global.debug == true)
{
    mouse_cell_x = mouse_x div tile_size;
    mouse_cell_y = mouse_y div tile_size;
    mouse_draw_x = mouse_cell_x * tile_size;
    mouse_draw_y = mouse_cell_y * tile_size;

    if (fps_timer &gt; 0)
    {
        fps_timer -= 1;
    }
    else
    {
        fps_timer = fps_timer_init;
        fps_string = "FPS = " + string(round(fps_real));
    }
    inst_string = "Inst \# = " + string(instance_count);
    
    if (instance_exists(oPlayer))
    {
        playerx_string = "X = " + string(oPlayer.x);
        playery_string = "Y = " + string(oPlayer.y);
        move_timer_string = string(oPlayer.move_timer_count);
    }
    
    if (instance_exists(oSpell))
    {
        spell_x_string = "X = " + string(oSpell.move_dir[0]);
        spell_y_string = "Y = " + string(oSpell.move_dir[1]);
    }
    
    // cycles through all the terrain objects
    if mouse_wheel_up()
    {
        obj_to_place++;
        if (obj_to_place &gt; terrain_end)
        {
            obj_to_place = terrain_start;
        }
    }
    else if mouse_wheel_down()
    {
        obj_to_place--;
        if (obj_to_place &lt; terrain_start)
        {
            obj_to_place = terrain_end;
        }
    }
    if (instance_exists(cursor_object))
    {
        with(cursor_object)
        {
            instance_change(oGame.obj_to_place, true);
            //alpha = 0.5;
        }
        
        cursor_object.x = mouse_cell_x;
        cursor_object.y = mouse_cell_y;
        cursor_object.draw_x_coords = ( cursor_object.x * tile_size ) + spr_middle;
        cursor_object.draw_y_coords = ( cursor_object.y * tile_size ) + spr_middle;
    }
    
    if mouse_check_button(mb_left)
    {
        if ( (mouse_cell_x &gt;= 0) and (mouse_cell_y &gt;= 0) and (mouse_cell_x &lt; r_width) and (mouse_cell_y &lt; r_height) )
        {
            with (map[mouse_cell_x, mouse_cell_y])
            {
                instance_destroy();
            }
            map[mouse_cell_x, mouse_cell_y] = instance_create(mouse_cell_x, mouse_cell_y, obj_to_place);
            map_update[mouse_cell_x, mouse_cell_y] = map[mouse_cell_x, mouse_cell_y];
        }
    }
    if mouse_check_button(mb_right)
    {
        if ( (mouse_cell_x &gt;= 0) and (mouse_cell_y &gt;= 0) and (mouse_cell_x &lt; r_width) and (mouse_cell_y &lt; r_height) )
        {
            with (map[mouse_cell_x, mouse_cell_y])
            {
                instance_destroy();
            }
            map[mouse_cell_x, mouse_cell_y] = instance_create(mouse_cell_x, mouse_cell_y, terrain_start);
            map_update[mouse_cell_x, mouse_cell_y] = map[mouse_cell_x, mouse_cell_y];
        }
    }
    if mouse_check_button_pressed(mb_middle)
    {
        if ( (mouse_cell_x &gt;= 0) and (mouse_cell_y &gt;= 0) and (mouse_cell_x &lt; r_width) and (mouse_cell_y &lt; r_height) )
        {
            map_update[mouse_cell_x, mouse_cell_y] = instance_create(mouse_cell_x, mouse_cell_y, oRock);
        }
    }
    // press n to create a new map array
    if keyboard_check_pressed(ord("N"))
    {
        input_r_width = get_integer_async("Create room. Width: ", "");
        
        //room_dimensions(tile_size, file_width, file_height);
    }
    // press s to save the current level to txt file
    if keyboard_check_pressed(ord("S"))
    {
        var save_file = get_save_filename("Normal text file (*.txt)|*.txt", "map_00"); // takes player's input for a file name
        if save_file != ""      // as long as user is actually putting characters in, we save
        {
            textfile_save_map(save_file, map, terrain_start);  // converts a map array into a text file
        }
    }
    // press l to load a map from a text file
    if keyboard_check_pressed(ord("L"))
    {
        var load_file = get_open_filename_ext("Normal text file (*.txt)|*.txt", "map_00", working_directory, "Hello");  // takes player's input for a file name
        if load_file != ""      // as long as user is actually putting characters in, we load
        {
            textfile_load_map(load_file);  // converts a map array into a text file
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Calculations
// so the draw event doesn't have a bunch of math in it

var view_scale = (1 / power(view_factor, view_switch));
// sets the view position according to player's position
room_view( (r_width * view_scale), (r_height * view_scale) );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User Input
var id_of_calling_async_event = ds_map_find_value(async_load, "id");
if id_of_calling_async_event == input_r_width
{
    if ds_map_find_value(async_load, "status")
    {
        room_dimensions(tile_size, ds_map_find_value(async_load, "value"), r_height);
        input_r_height = get_integer_async("Height: ", "");
    }
}
if id_of_calling_async_event == input_r_height
{
    if ds_map_find_value(async_load, "status")
    {
        room_dimensions(tile_size, r_width, ds_map_find_value(async_load, "value"));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Surface
surfaces_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Drawing to Surface
surfaces_begin();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

// this draws things at their proper depth, but is VERY inneffcient. Better way?
with(oThing)
{
    //draw_text_transformed_colour(draw_x_coords, draw_y_coords, char, size, size, angle, colour, colour, colour, colour, alpha);
    //draw_background_general(bg_tiles, 0, 0, 8, 8, draw_x_coords, draw_y_coords, size, size, angle, colour, colour, colour, colour, 1);
    if (depth &gt;= 0)
    {
        draw_sprite_ext(spr_tiles, object_index, draw_x_coords, draw_y_coords, scale, scale, angle, colour, 1);
    }
}

with(oThing)
{
    //draw_text_transformed_colour(draw_x_coords, draw_y_coords, char, size, size, angle, colour, colour, colour, colour, alpha);
    //draw_background_general(bg_tiles, 0, 0, 8, 8, draw_x_coords, draw_y_coords, size, size, angle, colour, colour, colour, colour, 1);
    if (depth &lt; 0)
    {
        draw_sprite_ext(spr_tiles, object_index, draw_x_coords, draw_y_coords, scale, scale, angle, colour, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw

// TODO: get rid if this conditional?
if (global.debug == true)
{
    //draw the FPS, top left
    draw_set_font(font[1]);
    draw_set_colour(c_red);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size, fps_string);
    
    //draw the number of instances, below fps count
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*2, inst_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*3, r_width);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*4, r_height);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*5, playerx_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*6, playery_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*7, mouse_x);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*8, mouse_y);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*9, move_timer_string);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*10, string(oPlayer.draw_offset_x));
    if (instance_exists(oSpell))
    {
        draw_text(view_xview[0] + 32, view_yview[0] + tile_size*11, spell_x_string);
        draw_text(view_xview[0] + 32, view_yview[0] + tile_size*12, spell_y_string);
    }
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*11, room_width);
    draw_text(view_xview[0] + 32, view_yview[0] + tile_size*12, room_height);
    draw_rectangle_colour( mouse_draw_x, mouse_draw_y, mouse_draw_x + tile_size, mouse_draw_y + tile_size, c_red, c_red, c_red, c_red, true );
    //draw_text( mouse_draw_x, mouse_draw_y, cursor_object_char );
    
    draw_set_font(font[font_switch]);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
