<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oThing</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attributes
event_inherited();

// Basic attributes
char = '@'; //graphic
colour_init = c_white; //colour
colour = merge_colour(colour_init, c_black, y/48);

// Player attributes + variables

oGame.map[x, y] = instance_create(x, y, oSpace);
// TODO: properly destroy instance at this position

move_init(3.5, 1); // set this to 1 for instant movement
check_creature_init();

solid = false;

carry = false;
carrying = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
//colour = merge_colour(colour_init, c_black, y/48);
if keyboard_check_pressed(vk_shift)
{
    instance_create(x, y, oSpell);   
}
move_type(mt_key, -1);
check_creature();

if (keyboard_check_pressed(ord('X')))
{
    if (oGame.map_update[x-1,y].object_index == oRock)
    {
        carry = true;
        carrying = oGame.map_update[x-1,y];
    }
}
if (carry == true)
{
    if (instance_exists(carrying))
    {
        with(carrying)
        {
            move_type(mt_key, -1);
            solid = false;
        }
    }
    //carrying.x = x;
    //carrying.y = y-1;
}
/*
        with (carrying)
        {
            move_dir[0] = -move_distance;
            move_timer_start(move_timer_max, 1);
        }
        */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
