<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>oCreature</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attributes
event_inherited();


char = '@';
colour = c_white;

speed_run = 1;

shift_time = 0;

pos_check[2] = 0;

move_timer = false;
move_timer_count = 0;
move_timer_max = 8;
move_time_mult = 3;

run = false;
oGame.map[x, y] = instance_create(x, y, oSpace);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

event_inherited();

var cell_current = oGame.map[x, y];

/*
switch (keyboard_key)
{   
    case vk_up:
        pos_check[1] -= move_speed;
        break;
    case vk_down:
        pos_check[1] += move_speed;
        break;
    case vk_left:
        pos_check[0] -= move_speed;
        break;
    case vk_right:
        pos_check[0] += move_speed;
        break;
    
}
*/

if move_timer == false
{
    if keyboard_check(vk_shift) and run == true
    {
        if keyboard_check(vk_left)
        {
            pos_check[0] -= speed_run;
            move_timer = true;
            move_timer_count = move_timer_max;
        }
        else if keyboard_check(vk_right)
        {
            pos_check[0] += speed_run;
            move_timer = true;
            move_timer_count = move_timer_max*move_timer_mult;
            audio_sound_pitch(sndBloop, move_timer_mult);
            audio_play_sound(sndBloop, 1, false);
            if move_timer_mult &gt; 1
            {
                move_timer_mult -= 1;
            }
        }
        else if keyboard_check(vk_up)
        {
            pos_check[1] -= speed_run;
            move_timer = true;
            move_timer_count = move_timer_max;
        }
        else if keyboard_check(vk_down)
        {
            pos_check[1] += speed_run;
            move_timer = true;
            move_timer_count = move_timer_max;
        }
        else
        {
            move_timer_mult = 3;
            audio_sound_pitch(sndBloop, 1);
        }
    }
    else
    {
        if keyboard_check_pressed(vk_left)
        {
            pos_check[0] -= speed_run;
        }
        else if keyboard_check_pressed(vk_right)
        {
            pos_check[0] += speed_run;
        }
        if keyboard_check_pressed(vk_up)
        {
            pos_check[1] -= speed_run;
        }
        else if keyboard_check_pressed(vk_down)
        {
            pos_check[1] += speed_run;
        }
    }
}
else
{
    if move_timer_count &gt; 0
    {
        move_timer_count -= 1;
    }
    else
    {
        move_timer = false;
        // put shift speed multipler here if shift is pressed! decrease move_timer_ma or it's equivalent
    }
}

var cell_next = oGame.map[pos_check[0], pos_check[1]];

if cell_next.solid == false
{
    x = pos_check[0];
    y = pos_check[1];
    if x &lt; 1
    {
        oGame.generate = true;
        x = 64;
    }
    else if x &gt; 64
    {
        oGame.generate = true;
        x = 1;
    }
    if y &lt; 1
    {
        oGame.generate = true;
        y = 48;
    }
    else if y &gt; 48
    {
        oGame.generate = true;
        y = 1;
    }
}
else
{
    //if !audio_is_playing(sndBump)
        audio_play_sound(sndBump, 1, false);
        
        if keyboard_check(vk_shift) and run == true
        {
            oGame.map[pos_check[0], pos_check[1]].hp = 0;
            oGame.map[pos_check[0], pos_check[1]] = instance_create(pos_check[0], pos_check[1], oStump);
            //audio_play_sound(1, sndCrash, false);
            move_timer_count = move_timer_max * 2;
        }
}
/*
if cell_current.object_index == oMan
{
    instance_create(0, 0, oMessage);
}
else if instance_exists(oMessage)
{
    with(oMessage)
    {
        instance_destroy();
    }
}
*/

oGame.map_display[x, y] = global.player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
