<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
// this gives all in-game objects these values:
hp = 1;                                                             // TODO: do we NEED this for every object? could just change terrain to solid = false and different char
//char = '/#';                                                         // the default symbol displayed for the object. will be set by a function usually
//tile = 0;
colour_init = c_maroon;                                             // default colour. will also be changed by function most likely
colour = colour_init; 
alpha = true;
angle = 0;
size = 1;
//colour = merge_colour(colour_init, c_black, y/oGame.r_height);      // TODO: prob won't need this if sprites are used. changes the colour of every object so that they fade to black near bottom of screen.
solid = false;      // sets the object to solid, so it can't be walked through
dead = oStamped;    // the default object created when the instance is destroyed. set by a function usually
dead_sound = sndCrash;
sound_step = -1; // NOTE: is this a good idea? seems to work, just not sure if it will screw up somehow
draw_random_char_init();

tile_size = oGame.tile_size;
spr_middle = oGame.spr_middle;

draw_offset_x = 0;
draw_offset_y = 0;

draw_x_coords = x*tile_size + spr_middle;
draw_y_coords = y*tile_size + spr_middle;

animate_init();

carryable = false;

scale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Size hack
//scale = y/oGame.r_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
